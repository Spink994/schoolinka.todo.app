import { GrLinkNext, GrLinkPrevious } from 'react-icons/gr';
import { Button } from '../common';
import { useEffect, useRef, useState } from 'react';

type PaginationType = {
	currentPage: number;
	itemsPerPage: number;
	dataLength: number;
	handlePageChange: (pageNumber: number) => void;
};

export default function Pagination({
	currentPage,
	dataLength,
	itemsPerPage,
	handlePageChange,
}: PaginationType) {
	const totalPages = Math.ceil(dataLength / itemsPerPage) ?? 1;
	const containerRef = useRef<HTMLDivElement | null>(null);
	const [boundary, setBoundary] = useState<number>(0);

	const scrollForward = useRef<number>(0);
	const scrollBackward = useRef<number>(scrollForward.current);

	function handleScrollPagination(
		direction: 'left' | 'right' | 'end' | 'start'
	) {
		if (containerRef.current === null) return;
		const scrollingChild = containerRef.current
			.children[0] as HTMLDivElement;

		if (direction === 'right' && totalPages - currentPage >= 3) {
			scrollForward.current = scrollForward.current + 80;
			scrollBackward.current = scrollForward.current;
			scrollingChild.style.transform = `translateX(-${scrollForward.current}px)`;
		}

		if (direction === 'left' && currentPage > 6) {
			scrollBackward.current = scrollBackward.current - 80;
			scrollForward.current = scrollBackward.current;
			scrollingChild.style.transform = `translateX(-${scrollBackward.current}px)`;
		}

		if (direction === 'right' && totalPages - currentPage <= 2) {
			scrollingChild.style.transform = `translateX(-${
				scrollForward.current + 20
			}px)`;
		}

		if (direction === 'left' && currentPage < 6)
			scrollingChild.style.transform = `translateX(${3}px)`;

		if (direction === 'start') {
			setBoundary(3);
			scrollForward.current = 0;
			scrollingChild.style.transform = `translateX(${0}px)`;
		}

		if (direction === 'end') {
			scrollBackward.current = scrollingChild.clientWidth - 180;
			scrollingChild.style.transform = `translateX(-${
				scrollingChild.clientWidth - 180
			}px)`;
		}
	}

	useEffect(() => {
		if (containerRef.current === null) return;
		const rightBoundaryOfScrollContainer =
			containerRef.current?.getBoundingClientRect().left;

		const rightBoundaryOfActiveChild =
			containerRef.current.children[0].children[
				currentPage - 1
			]?.getBoundingClientRect().left;

		setBoundary(
			Math.abs(
				Math.ceil(
					rightBoundaryOfActiveChild - rightBoundaryOfScrollContainer
				)
			)
		);

		if (currentPage === 1) setBoundary(3);
	}, [currentPage]);

	return (
		<div className="mt-8 flex min-h-[72px] w-full items-center justify-between gap-1 border-t border-gray-300 py-3">
			{/* Previous Button */}
			<Button
				className="w-max bg-transparent font-semibold !text-gray-900 disabled:opacity-30 [&[aria-current='true']]:bg-gray-100"
				onClick={() => {
					if (currentPage === 1) return;
					if (boundary <= 110) handleScrollPagination('left');
					setTimeout(() => {
						handlePageChange(currentPage - 1);
					}, 150);
				}}
				// disabled={currentPage === 1}
			>
				<GrLinkPrevious /> Previous
			</Button>

			{/* Autogenerated buttons */}
			<div className="flex w-full max-w-max gap-1">
				<Button
					aria-current={1 === currentPage}
					className="h-10 min-w-[40px] max-w-[40px] rounded-full bg-transparent !text-gray-900 [&[aria-current='true']]:bg-gray-100"
					onClick={() => {
						handlePageChange(1);
						handleScrollPagination('start');
					}}
					disabled={currentPage === 1}
				>
					{1}
				</Button>

				{currentPage >= 6 && (
					<span className="inline-flex translate-y-2">...</span>
				)}
				<div
					className="flex w-full max-w-[180px] overflow-x-hidden"
					ref={containerRef}
				>
					<div className="flex w-max items-center gap-1 transition-transform">
						{Array.from({ length: totalPages }, (_, index) => {
							if (index === 0 || index === 1) return;
							return (
								<Button
									aria-current={index === currentPage}
									className="h-10 min-w-[40px] max-w-[40px] rounded-full bg-transparent !text-gray-900 [&[aria-current='true']]:bg-gray-100"
									key={index}
									onClick={() => {
										handlePageChange(index);
									}}
									disabled={currentPage === index}
								>
									{index}
								</Button>
							);
						})}
					</div>
				</div>
				{currentPage <= totalPages - 5 && (
					<span className="inline-flex translate-y-2">...</span>
				)}
				<Button
					aria-current={totalPages === currentPage}
					className="h-10 min-w-[40px] max-w-[40px] rounded-full bg-transparent !text-gray-900 [&[aria-current='true']]:bg-gray-100"
					onClick={() => {
						handlePageChange(totalPages);
						handleScrollPagination('end');
					}}
					disabled={currentPage === totalPages}
				>
					{totalPages}
				</Button>
			</div>

			{/* Next Button */}
			<Button
				className="w-max bg-transparent font-semibold !text-gray-900 disabled:opacity-30 [&[aria-current='true']]:bg-gray-100"
				onClick={() => {
					if (currentPage === totalPages) return;
					if (boundary >= 145) handleScrollPagination('right');
					setTimeout(() => {
						handlePageChange(currentPage + 1);
					}, 50);
				}}
				disabled={currentPage === totalPages}
			>
				Next <GrLinkNext />
			</Button>
		</div>
	);
}
